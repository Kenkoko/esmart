import pickle
from pathlib import Path
from typing import Iterable, List, Optional, Union

import tensorflow as tf
import tensorflow_addons as tfa
import yaml
from functools import partial
from submodules.MOAP_core.factory.model_factory import ModelID
from submodules.MOAP_core.utils.gcs_util import ensure_gcs_storage
from tensorflow_addons.metrics.f_scores import FBetaScore
from tensorflow_addons.utils.types import AcceptableDTypes, FloatTensorLike
from typeguard import typechecked
from submodules.MOAP_core.factory.model_factory import ModelID
from deploy.submodules.MOAP_core.utils.postprocessor_utils import postprocessor_classifier
from deploy.submodules.MOAP_core.utils.preprocessor_utils import {{ moap_lib }}

MODEL_ID = ModelID.{{ id_model }}

def get_config():
    # load yaml config file
    with open("{}/config_dev.yaml".format(Path(__file__).parent.absolute()), "r") as f:
        config = yaml.safe_load(f)
    config.update(
        {
        "MODELPATH": "{{ MODELPATH }}",
        "LOCAL_MODELPATH": "{{ LOCAL_MODELPATH }}"
        })
    return config


def get_model(config):
    model = tf.keras.models.load_model(config["MODELPATH"],
        custom_objects={
            "F1Score": tfa.metrics.F1Score,
            "PrecisionMultiClass": PrecisionMultiClass,
            "RecallMultiClass": RecallMultiClass,
        }
    )
    return model

def get_labels(config):
    return {{ label_list }}

def get_preprocessor(config, type_func):
    r"""
    create parsing function based on configuaration
    """
    if type_func not in ['training', 'inference']:
        raise ValueError(f'Unknown type_func {type_func}')

    if type_func == 'training':
        return partial({{ train_moap_preprocessor }}, resize_to=({{ train_image_size }}, {{ train_image_size }}))
    else: # validation
        return partial({{ valid_moap_preprocessor }}, resize_to=({{ valid_image_size }}, {{ valid_image_size }}))
    
    

def get_train_datasets():
    return {{ train_datasets }}

def get_validation_datasets():
    return {{ valid_datasets }}

def get_dip(config, context="validation"):

    if context == "training":
        datasets = get_train_datasets()
    elif context == "validation":
        datasets = get_validation_datasets()
    else:
        raise ValueError(f"Unknown context {context}")
    
    ## simulate the ds.get_filelist
    with open("/home/dhuynh/workspaces/data/moap_crossarm_material_validation/{}/list_gen_get_filelist.pkl".format(datasets[0]), "rb") as input_file:
        data = pickle.load(input_file)
    ### generator from list
    def gen(list):
        for item in list:
            yield item
    gcs_files = gen(data)

    batch_size: int = config['train']['batch_size']
    shuffle_buffer_size = batch_size * config['train']['shuffle_buffer_size_factor']

    # dataset = tf.data.Dataset.from_generator(lambda: gcs_files, (tf.string, tf.int32))
    filepaths = []
    labels = []
    for file, label in gcs_files:
        filepaths.append(file)
        class_names = config['dataset']['data_arg']['class_names']
        labels.append(class_names.index(label))
    dataset = tf.data.Dataset.from_tensor_slices((filepaths, labels))
    ### create dataset
    if context == 'training':
        parse_func = get_preprocessor('training')
        dataset = dataset.map(parse_func, num_parallel_calls=tf.data.AUTOTUNE)
        dataset = dataset.shuffle(buffer_size=shuffle_buffer_size)
        dataset = dataset.batch(batch_size, drop_remainder=True)
        dataset = dataset.prefetch(buffer_size=tf.data.AUTOTUNE)
        dataset = dataset.repeat()
    elif context == 'validation':
        parse_func = get_preprocessor('inference')
        dataset = dataset.map(parse_func, num_parallel_calls=tf.data.AUTOTUNE)
        dataset = dataset.batch(batch_size)
        # dataset = dataset.prefetch(buffer_size=tf.data.AUTOTUNE)
    else:
        raise ValueError(f'Unknown context {context}')
    return dataset

def get_postprocessor(config):
    return postprocessor_classifier


## ==================== custom metrics ====================

{{ RecallMultiClass }}

{{ PrecisionMultiClass }}




